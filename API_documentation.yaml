openapi: 3.0.0
info:
  title: Kanban Board API
  version: 1.0.0
  description: documentation on API's for Lists and Cards
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: List
    description: CRUD on Lists
  - name: Card
    description: CRUD on Cards
    
paths:
  /api/lists/{user_id}:
    description: endpoint to read a list
    get:
      tags:
        - List
      description: operation to get a list of task.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: list_object
                type: object
                properties:
                  title:
                    type: string
                    example: task1
                  description:
                    type: string
                    example: mad1-project
                  user_id:
                    type: integer
                    example: 12
                  id:
                    type: integer
                    example: 1
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                'if user have no task ':
                  value: |-
                    {
                        "message": "user is in the database but does not have any task at the moment"
                    }
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }
  /api/lists:
    description: endpoint to create a list
    post:
      tags:
      - List
      description: create a new list.
      requestBody:
        content:
          application/json:
            schema:
              title: list_object
              type: object
              properties:
                title:
                  type: string
                  example: task12
                description:
                  type: string
                  example: create API
                user_id:
                  type: integer
                  example: 4
                id:
                  type: integer
                  example: 12
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: list_object
                type: object
                properties:
                  title:
                    type: string
                    example: task12
                  description:
                    type: string
                    example: create API
                  user_id:
                    type: integer
                    example: 4
                  id:
                    type: integer
                    example: 12
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }      
    put:
      tags:
      - List
      description: edit an existing  list.
      requestBody:
        content:
          application/json:
            schema:
              title: list_object
              type: object
              properties:
                title:
                  type: string
                  example: task12
                description:
                  type: string
                  example: create API on list
                user_id:
                  type: integer
                  example: 4
                id:
                  type: integer
                  example: 12
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: list_object
                type: object
                properties:
                  title:
                    type: string
                    example: task12
                  description:
                    type: string
                    example: must complete mad1-project before 7 sept
                  user_id:
                    type: integer
                    example: 4
                  id:
                    type: integer
                    example: 12
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                'if user have no list  ':
                  value: |-
                    {
                     "message": "user does not have any list with this list_id try updating other tasks"
                     }
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }    
                    
                    
  /api/lists/{user_id}/{list_id}:
    description: endpoint to delete a list
    delete:
      tags:
      - List
      description: operation to delete a list.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: list_id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                'on successful deletion  ':
                  value: "list deleted"
                     
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                'if user have no list  ':
                  value: |-
                    {
                     "message": "user does not have any list with this list_id try deleting other tasks"
                     }
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }                 
                      
                      
#card api
  /api/cards/{user_id}:
    description: endpoint to read a list
    get:
      tags:
        - Card
      description: operation to get a list of task.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 1 
      responses:        
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: list_object
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  content:
                    type: string
                    example: mad1-project
                  deadline:
                    type: string
                    format: date-time - RFC3339
                    example: Thu, 08 Sep 2022 06:23:00 -0000
                  is_completed:
                    type: boolean
                    example: false               
                  user_id:
                    type: integer
                    example: 1
                  list_id:
                    type: integer
                    example: 10  
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                'if user have no card  ':
                  value: |-
                    {
                     "message": "user is in the database but does not have any card at the moment"
                     }             
                     
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }                      
                     
  /api/cards:
    description: endpoint to create a card
    post:
      tags:
      - Card
      description: create a new card.
      requestBody:
        content:
          application/json:
            schema:
              title: list_object
              type: object
              properties:
                  id:
                    type: integer
                    example: 2
                  content:
                    type: string
                    example: xyz
                  deadline:
                    type: string
                    format: date-time - RFC3339
                    example: Sat, 10 Sep 2022 10:33:00 -0000
                  is_completed:
                    type: boolean
                    example: false               
                  user_id:
                    type: integer
                    example: 2
                  list_id:
                    type: integer
                    example: 11                     
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: list_object
                type: object  
                properties:
                  id:
                    type: integer
                    example: 2
                  content:
                    type: string
                    example: xyz
                  deadline:
                    type: string
                    format: date-time - RFC3339
                    example: Sat, 10 Sep 2022 10:33:00 -0000
                  is_completed:
                    type: boolean
                    example: false               
                  user_id:
                    type: integer
                    example: 2
                  list_id:
                    type: integer
                    example: 11
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                'if card limit exceeds  ':
                  value: |-
                    {
                     "message": "limit exceeds , atmost two cards can be added"
                     }             
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                'if list is not there  ':
                  value: |-
                    {
                     "message": "user is in the database but does not have any list where you can add a card ,add a list first"
                     }                    
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }                     
                     
    put:
      tags:
      - Card
      description: edit/update card.
      requestBody:
        content:
          application/json:
            schema:
              title: list_object
              type: object
              properties:
                  id:
                    type: integer
                    example: 2
                  content:
                    type: string
                    example: abcdef
                  deadline:
                    type: string
                    format: date-time - RFC3339
                    example: Sat, 10 Sep 2022 10:33:00 -0000
                  is_completed:
                    type: boolean
                    example: true               
                  user_id:
                    type: integer
                    example: 2
                  list_id:
                    type: integer
                    example: 11                          
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: list_object
                type: object  
                properties:
                  id:
                    type: integer
                    example: 2
                  content:
                    type: string
                    example: abcdef
                  deadline:
                    type: string
                    format: date-time - RFC3339
                    example: Sat, 10 Sep 2022 10:33:00 -0000
                  is_completed:
                    type: boolean
                    example: true           
                  user_id:
                    type: integer
                    example: 2
                  list_id:
                    type: integer
                    example: 11               
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                'if list is not there  ':
                  value: |-
                    {
                     "message": "user is in the database but does not have any list where you can edit a card ,add a list first"
                     }                    
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                if user_id is not in the database:
                  value: |-
                    {
                        "message": "no user with this id"
                    }                                 
  /api/cards/{user_id}/{list_id}/{card_id}:
    description: endpoint to delete a list
    delete:
      tags:
      - Card
      description: operation to delete a list.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 2
        - in: path
          name: list_id
          required: true
          schema:
            type: integer
            example: 12
        - in: path
          name: card_id
          required: true
          schema:
            type: integer
            example: 6   
      responses:        
        '200':
          description: OK
          content:
            application/json:
              examples:
                'on successful deletion  ':
                  value: "list deleted"
                
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                1:
                  summary: 
                    'if card is not in the database'
                  value: 
                    {
                        "message": "no such card exist,try deleting a card with valid card_id"
                    }
                2: 
                  summary:
                    'if user_id is not in the database'
                  value: 
                    {
                        "message": "no user with this id"
                    }   
                3:
                  summary: 
                    'if a user does not have any list'
                  value: 
                    {
                        "message": "user does not have any list with this list_id"
                    }   
                     
                     
                     